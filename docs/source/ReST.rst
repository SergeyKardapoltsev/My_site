Синтаксис разметки reStructuredText
===================================

===================================

Структуру и оформление текстов для этого сайта я создавал с помощью
облегчённого языка разметки ReST. Напомню, что документы с разметкой ReST
– обычные текстовые файлы. Все вносимые изменения в такие файлы можно
отслеживать с помощью Git.

В этом разделе указаны те элементы синтаксиса ReST, которые я применил
при создании проекта. Ознакомиться с другими его возможностями можно,
например, на `этом сайте <https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html>`_
и `здесь <https://helpbook.readthedocs.io/ru/latest/cat/syntax.html>`_.

В ReST отступы и пробелы имеют важное значение для команд разметки,
но не имеют значения внутри текста (несколько пробелов будут отображаться
как один). В командах ReST используется символ обратной кавычки «`».
Использование обычных одинарных кавычек в командах не привёдет к желаемым
результатам.

Заголовки
---------

ReST поддерживает несколько уровней заголовков. Заголовки первого уровня
подчёркиваются символом равно ``=``. Заголовки второго уровня подчёркиваются
символом короткого тире или минуса ``-``. Заголовки третьего уровня
подчёркиваются символом тильды ``~``. Для параграфов можно
использовать подчёркивание символами двойных кавычек ``"``.

Заголовки можно отбить строкой с помощью символов::

    = ` : ' " ~ ^ _ * + # < >

.. code-block::

    Заголовок 1 уровня
    ==================

    Заголовок 2 уровня
    ------------------

    Заголовок 3 уровня
    ~~~~~~~~~~~~~~~~~~

    Заголовок 4 уровня
    """"""""""""""""""

Абзацы
------

Абзацы в ReST отделяются друг от друга пустой строкой:

.. code-block::

    Это первый абзац.

    А это второй абзац.

Абзацы можно визуально отделить чертой. Для этого достаточно поставить
подряд несколько дефисов или символов нижнего подчеркивания (не меньше 4-х):

.. code-block::

    ----------

    __________

Выглядеть это будет так:

Первый абзац

------------

Второй абзац

Начертание текста
-----------------

Чтобы сделать текст **жирным**, нужно обособить его двумя символами
звёздочек с каждой стороны:

.. code-block::

    **жирный текст**

Чтобы сделать текст *курсивным*, нужно обособить его символами
звёздочек – по одному символу с каждой стороны:

.. code-block::

    *курсивный текст*

.. attention::

    Пробелы между выделяемым словом и звёздочкой ставить нельзя.
    Варианты ``** так **``, ``** так**`` или ``*так *`` не дадут
    нужного результата.

Списки
------

Списки могут быть нумерованными, автонумерованными, маркированными и
вложенными.

Нумерованные списки создаются с помощью символа числа с точкой:

.. code-block::

    1. Первый элемент списка
    2. Второй элемент списка
    ...
    10. Десятый элемент списка

Результат:

1. Первый элемент списка
2. Второй элемент списка

...

10. Десятый элемент списка

Автонумерованные списки создаются с помощью символа решётки с точкой:

.. code-block::

    #. Один
    #. Два
    #. Три

Результат:

#. Один
#. Два
#. Три

Маркированные списки создаются с помощью символа звёздочки или дефиса.
Пробелы после символа обязательны:

.. code-block::

    * один
    * два

    или

    - один
    - два

Результат:

* один
* два

или

- один
- два

Вложенные списки создаются с помощью отсутпов:

.. code-block::

    * Первый уровень
        * Второй уровень
            * Третий уровень

    или

    #. Один
        * Маркер
    #. Два
        #. Номер

Результат:

* Первый уровень
    * Второй уровень
        * Третий уровень

или

#. Один
    * Маркер
#. Два
    #. Номер

Программный код
-------------------------

Чтобы вставит часть кода в предложение, нужно выделить текст двойными
обратными кавычками:

.. code-block::

    Начало предложения, ``текст в виде програмного кода``, конец предложения.

Результат:

Начало предложения, ``текст в виде програмного кода``, конец предложения.

Вставить программный код в отдельном блоке можно с помощью команды
``.. code-block::``:

.. code-block::

    .. code-block::

        Программный код

Если после команды ``.. code-block::`` добавить название языка
программирования, будет поддерживаться подсветка синтаксиса:

.. code-block::

    .. code-block:: python

        def some_function():
            print("Какая-то функция")

Результат:

.. code-block:: python

        def some_function():
            print("Какая-то функция")

Комментарии
------------

В ReST можно оставлять комментарии. Они будут видны только в исходном
файле ReST. Комментарии создаются с помощью двух точек в начале предложения
``..``. Для создания многострочных комментариев необходимо соблюдать
отступ:

.. code-block::

    .. Это комментарий
       Многострочный комментарий

Ссылки
-------

Внешние ссылки создаются так:

.. code-block::

    1. Внешние ссылки выглядят так: ссылка_.

    .. _ссылка: https://helpbook.readthedocs.io/ru/latest/cat/syntax.html

    2. Если несколько слов, тогда так: `ссылка в несколько слов`_.

    .. _`ссылка в несколько слов`: https://helpbook.readthedocs.io/ru/latest/cat/syntax.html

    3. `Более компактная запись ссылок <https://helpbook.readthedocs.io/ru/latest/cat/syntax.html>`_

Результат:

#. Внешние ссылки выглядят так: ссылка_.

.. _ссылка: https://helpbook.readthedocs.io/ru/latest/cat/syntax.html

#. Если несколько слов, тогда так: `ссылка в несколько слов`_.

.. _`ссылка в несколько слов`: https://helpbook.readthedocs.io/ru/latest/cat/syntax.html

#. `Более компактная запись ссылок <https://helpbook.readthedocs.io/ru/latest/cat/syntax.html>`_.

Внутренние ссылки делаются так:

.. code-block::

    Внутренние ссылки делаются так_

    .. _так:

Можно сделать ссылки на заголовки разделов. Например, ссылка на раздел
`Комментарии`_:

.. code-block::

    Ссылка на раздел создается так: `Комментарии`_.
    Достаточно в обратных кавычках написать название заголовка и после –
    символ нижнего подчёркивания без пробела.

Блоки примечаний и предупреждений
----------------------------------

Блоки примечаний и предупреждений используются, чтобы обратить внимание
на важную или дополнительную информацию. Язык заголовков и оформление
блоков зависит от выбранного шаблона. В стандартном шаблоне, используемом
на сайте ReadTheDocs.org все блоки имеют собственное оформление, а
локализация заголовков зависит от выбранного языка. Язык настраивается в
файле конфигурации Sphinx ``conf.py``.

Код блока **Совет**:

.. code-block::

    .. tip:: Блок **Совет**, команда: ``.. tip::``

Примеры блоков:

.. attention::

    Блок **Внимание**, команда: .. attention::

.. caution::

    Блок **Осторожно**, команда: .. caution::

.. danger::

    Блок **Опасно**, команда: .. danger::

.. error::

    Блок **Ошибка**, команда: .. error::

.. hint::

    Блок **Подсказка**, команда: .. hint::

.. important::

    Блок **Важно**, команда: .. important::

.. note::

    Блок **Примечание**, команда: .. note::

.. tip::

    Блок **Совет**, команда: .. tip::

.. warning::

    Блок **Предупреждение**, команда: .. warning::

Содержание
-----------

Из заголовков ReST может автоматически создать оглавление, которое
вставляется командой ``.. contents::``:

.. code-block::

    .. contents:: Оглавление
       :depth: 2

    или

    .. contents:: Содержание
       :depth: 3

Параметр ``:depth:`` задаёт уровни заголовков, которые будут включены в
оглавление.